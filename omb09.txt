OpenMicroBlogging 0.9
---------------------

Abstract architecture
---------------------

Publisher - the author of microblogging notices
Subscriber - the receiver of microblogging notices
Publisher server - the Web-accessible server that provides the
	  publisher's data
Subscriber server - the Web-accessible server that provides data
	  to the subscriber
Notice - a unit of content, typically a short plain text message
       with context and attachments.

Requirements
------------

* Subscriber can receive Publisher's notices very soon after
  publication. ("Real time", "near real time") (Upshot: we want
  push.)
* Notices contain plain text in UTF-8 encoding and may contain
  optional HTML representation as well as one or more enclosure.
* A notice can be in response to another notice.
* A notice can be a forwarded copy of another notice. ("repeat",
  "retweet").
* A notice can be about a topic.
* A notice can be directed to the attention of a particular recipient.
  ("mention").
* Anyone can mark a notice as a "favorite", or remove that mark.
* Publisher server can store a list of all Subscribers for a given
  Publisher, including identities and profile data.
* Subscriber server can store a list of all Publishers for a given
  Subscriber, including identities and profile data.
* Publisher server can store a list of all responses to a notice
  by a publisher.
* Publisher server can store a list of all forwarded copies of a notice
  by a publisher.
* Publisher server can store a list of all "favorites" of a notice by
  a Publisher.
* Servers can determine notice context and metadata without
  parsing the plain text according to a particular syntax.
* Subscribers can subscribe to a feed with multiple authors, such
  as a group, a search feed, or a tag feed.

Out of scope
============

The following elements of microblogging systems are out of scope for
this standard.

* Microblogging syntax. Microblogging servers use a number of
  different idioms for adding metadata to a notice. Notable examples
  are hashtags (#hashtag) and @-replies (@username). We defer to
  microsyntax.org for developing these idioms and encourage innovation.
  Publisher and subscriber servers should be able to process received
  notices without parsing the plain text content.
* Client API. Microblogging systems typically allow many forms of
  communication between the publisher and the publisher server as well
  as the subscriber and the subscriber server. Some examples: Web
  interface, email, IM, SMS, and a Web API. By analogy with email,
  OMB is to client interfaces as SMTP is to IMAP or POP.

Protocol
--------

OMB 0.9 will apply the following technologies:

    - Atom.
    - PubSubHubBub ("PuSH"): a protocol for pushing Atom feeds to
      subscribers.
    - activitystrea.ms: a protocol for enhancing Atom entries to
      represent a user's activities.
    - Salmon: a protocol for submitting responses to Atom feeds.
    - WebFinger: global identities

Overview
========

Notices are represented as Atom entries, with additional data for
threading, responses, attention, and topics.

The publisher server uses PuSH to notify subscribers of new notices in
real-enough-time.

The subscriber server uses PuSH to subscribe to the publisher's notice
feed.

The subscriber server uses Salmon to post activitystrea.ms-enhanced
notifications to the publisher of new subscribers; of replies and
"attention" notices; of favorites; and of forwarded notices.

The publisher server optionally uses push to notify subscribers of the
publisher's activities, using activitystrea.ms-enhanced notifications.

If subscription originates with the Publisher server, the Subscriber
identifies themselves to the server using a Webfinger account URL
(nickname@example.com), and the server uses Webfinger discovery to
find an endpoint on the Subscriber server to initiate the subscription
process.

Atom entries
------------

* Text content stored as atom:summary
* HTML content stored as atom:content
* Attachments stored as link, rel=enclosure
* topics stored as atom:category, SHOULD be tags (rel-tag)
* response stored as thread:in-reply-to
* attention stored as omb:attn
* repeat/retweet stored as omb:forward

OMB namespace
=============

* forward (like in-reply-to)
** ref is uri
** type is ?
** href is URL
* attn
** ref is URI
** nickname is string
** account is acct: URI

Usage scenarios
---------------

These are some rough scripts for some important processes in this
system. They are non-normative.

Subscription (from Subscriber server)
=====================================

1. Subscriber notifies Subscriber server of a feed to which she
   wants to subscribe (e.g., by providing an URL or choosing from a
   list of known feeds or whatever).
2. If the Subscriber server already has a subscription to this feed,
   it skips to step 6.
3. Subscriber server downloads the feed using HTTP.
4. Subscriber server checks for a PuSH URL in the feed document. If
   there's no PuSH URL, the server MAY end the subscription. Any other
   subscription, e.g. one using polling, is out-of-band for OMB.
5. Subscriber server subscribes to the feed using PuSH subscription
   mechanism.
6. Subscriber server checks the feed for a Salmon endpoint. If none
   exists, the process is complete.
7. Subscriber server uses Salmon to push an activitystrea.ms
   representation of the subscription to the Publisher server.

Note: we presume in this flow that there is only one PuSH subscription
to any one Publisher's feed between the Publisher server and the
Subscription server. This is an optimization, to avoid sending the
same notice N times if there are N Subscribers on the Subscriber
service.

It's possible to participate in the OMB network with multiple
subscriptions per Subscriber server; this just misses out on an
optimization.

Subscription (from Publisher server)
====================================

1. Subscriber

Open questions
--------------

1. Should notices be represented as activitystrea.ms "notes" or
   "tweets", or should they be "raw" Atom entries?
   PRO for raw: system degrades cleanly to "plain" PuSH.
   CON for raw: less consistency in system;
2. Should there be discovery for publishers?
   PRO: makes adding new

References
----------

* Atom Threading: http://www.ietf.org/rfc/rfc4685.txt
